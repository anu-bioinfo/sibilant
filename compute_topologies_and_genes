%compute integrals and calculate topologies

%inputs:
%tfdata --> log-transformed data. rows = genes. columns = replicates (several per cell type). 
%idxs --> which cell types are we interested in out of all of the cell types in tfdata?
%labs --> cell type names
%iunique --> what is the cell type identity of each column of tfdata?
%iunique has same length as the # of columns in tfdata, and the max value
%of iunique is the number of cell types.
%P --> prior probability distribution P(mu, sigma). dimensions nbins x nbins
%Mu, Sigma --> axes for P. dimensions nbins x nbins

use_kde = 0;
nbins = 2^8; 
mumin = 2; mumax = 14;
sigmin = 0; sigmax = 0.75;
cutoff = log2(100);
[loggenemeans, loggenestds] = calc_log_mean_std(tfdata, iunique);

if use_kde == 1
    [bandwidth,density,Mu,Sigma]=kde2d([loggenemeans(:) loggenestds(:)],nbins,[mumin sigmin],[mumax sigmax]); %kernel density estimation. 
    % Reference: Botev. Z.I., Grotowski J.F and Kroese D. P. (2010). Kernel density estimation via diffusion. Annals of Statistics. 
    % Volume 38, Number 5, Pages 2916--2957
    density(density(:)<0) = 0; %get rid of numerical errors (sum is ~10^-8)
    dm=Mu(1,2)-Mu(1,1);
    ds=Sigma(2,1)-Sigma(1,1);
    P = density/(dm*ds*sum(density(:)));
else
    dm = (mumax-mumin)/nbins;
    ds = (sigmax-sigmin)/nbins;
    [Mu,Sigma]=meshgrid(mumin:dm:mumax,sigmin:ds:sigmax);
    density = ones(size(Mu));
    P = density/(dm*ds*sum(density(:)));
end

%start parallel cluster
pc = parcluster('local');
pc.JobStorageLocation = strcat('/scratch/furchtg/',getenv('SLURM_JOB_ID'));
matlabpool(pc,16)

tic;
[IA, IAB, IABCsame, IABC_Amin, IABC_Bmin, IABC_Cmin, IA_BC_Amax, IA_BC_Bmax, IA_BC_Cmax] = calculate_integrals_both_test4(tfdata, idxs, iunique, P, Mu, Sigma, cutoff); 
toc;

clear pc


ncells = size(IAB,1); ngenes = size(IAB,3);
combinations = combnk(1:ncells,3); %possible combinations of 3
selection = combinations; %triplets to consider (could choose a subset based on a preliminary distance metric)

psla = [1/2 1/6 1/6 1/6]; %vector of prior probabilities for non-transition genes
topology_prior = [1/4 1/4 1/4 1/4];

%parameters for topology inference
plikely_thresh = 0.5;
filter_min = 0;%ignore genes with values under threshold?
log_asym_min = log2(100); %threshold for expression
log_sym_min = log2(50); %threshold for expression
allodds = logspace(-4,2,50); %vary prior odds p(i master)/p(i slave)

ncandid = zeros(size(combinations,1),1); tlikely = zeros(size(ncandid)); plikely = zeros(size(ncandid));

%find most likely topologies
for j=1:size(combinations,1)
    icomb = j;
    [tlikely_ind, plikely_ind, ncandidates] = process_one_triplet(combinations, icomb,psla, IABCsame,IA_BC_Amax,IA_BC_Bmax,IA_BC_Cmax, IABC_Amin, IABC_Bmin, IABC_Cmin, filter_min, loggenemeans,log_asym_min,log_sym_min,idxs, allodds, topology_prior, 0, labs);
    tlikely(j) = tlikely_ind;
    plikely(j) = plikely_ind;
    ncandid(j) = ncandidates;
end


%parameters for gene probabilities
N_thresh_sym = 1000; N_thresh_asym = 1000; %thresholds for defining gene classes
p_thresh_asym = 0.8; p_thresh_sym = 0.8; 
odds0 = 0.05;

%find set of marker and transition genes
good_genes = zeros(ngenes,1);
for i=1:size(combinations,1)
    if and(plikely(i)>plikely_thresh,tlikely(i)~=0)
        icomb = i;
        iii = combinations(icomb,:);
        trip_data = loggenemeans(:,idxs(iii));
        [pgi_mas_T, pgi_sla, pgi_sym] = calc_pgi_topo(icomb,psla, IABCsame,IA_BC_Amax,IA_BC_Bmax,IA_BC_Cmax, IABC_Amin, IABC_Bmin, IABC_Cmin, filter_min,trip_data,log_asym_min,log_sym_min);
        [pasym_gi_T, pmarker_gi_T] = find_gene_probabilities(pgi_mas_T, pgi_sla, pgi_sym, tlikely(icomb), psla, odds0);
        genestatus = find_classes(pasym_gi_T, pmarker_gi_T, tlikely(icomb), trip_data, N_thresh_asym, N_thresh_sym, p_thresh_asym, p_thresh_sym);
        good_genes = (good_genes + abs(genestatus))>0;
    end
end



